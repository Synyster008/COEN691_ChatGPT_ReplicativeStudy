Template: `printFreezingDisplayLogsopening app wtoken = AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}}, allDrawn= {allDrawn}, startingDisplayed =  {startingDisplayed}, startingMoved =  {startingMoved}, isRelaunching =  {isRelaunching}`.
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x23,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Skipping AppWindowToken{placeholder token=Token{placeholder ActivityRecord{placeholder}}} -- going to hide`
 =================== 
The template of `visible is system.time.showampm` is `visible is system.time.showampm`.
 =================== 
Template: `mVisiblity.getValue is {value}`.
 =================== 
The template of `visible is system.charge.show` is `visible is system.charge.show`.
 =================== 
Template: `mVisiblity.getValue is {value}`
 =================== 
Template: `visible is system.call.count gt 0`
 =================== 
Template: `mVisiblity.getValue is {value}`
 =================== 
Template: `visible is system.message.count gt 0`
 =================== 
Template: `mVisiblity.getValue is {value}`.
 =================== 
Template: `visible is system.ownerinfo.show`
 =================== 
Template: `mVisiblity.getValue is {value}`.
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x23,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Skipping AppWindowToken{placeholder token=Token{placeholder ActivityRecord{placeholder}}} -- going to hide`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x23,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelAutohide`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {nextCaller}:{nextLine} {nextNextCaller}:{nextNextLine} {nextNextNextCaller}:{nextNextNextLine} {bottomOfCallStack}`.
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} android.view.IWindowS`
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `orientation change is complete, call stopFreezingDisplayLocked`
 =================== 
The template of `Screen frozen for +1s0ms due to Window{ca98d5 u0 com.tencent.qt.qtl/com.tencent.qt.qtl.activity.info.NewsDetailXmlActivity}` is `Screen frozen for +{time}s{ms} due to {window}`.
 =================== 
Template: `startAnimation begin`
 =================== 
Template: `startAnimation end`
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `remove({pendingIntent}) changed bounds; rebatching`
 =================== 
Template: `rotationForOrientationLw(orient={orient}, last={last}); user={user} USER_ROTATION_LOCKED`
 =================== 
Template: `Application requested orientation {orientation}, got rotation {rotation} which has compatible metrics`
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `getNeighboringCellInfo calling app is {app}`.
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
Template: `interceptKeyBeforeQueueing: key {key} , result : {result}`.
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `resumeSuspendedAutohide`
 =================== 
Template: `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
Template: `interceptKeyBeforeQueueing: key {key} , result : {result}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
The template of `acquire lock...` is `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `Skipping AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}} -- going to hide`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelAutohide`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
The template of `Bad activity token: android.os.BinderProxy@2bd79ce` is `Bad activity token: {token}`.
 =================== 
The template of `java.lang.ClassCastException: android.os.BinderProxy cannot be cast to com.android.server.am.ActivityRecord$Token` is `java.lang.ClassCastException: android.os.BinderProxy cannot be cast to com.android.server.am.ActivityRecord$Token`.
 =================== 
Template: `Skipping AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}} -- going to hide`
 =================== 
The template of `release:lock...` is `release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelAutohide`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `onTouchEvent::{arg1}, x={x}, y={y}`.
 =================== 
Template: `schedulePeek`
 =================== 
Template: `getRingtonePlayer...`
 =================== 
The template of `disable: < expand ICONS* alerts SYSTEM_INFO* back home recent clock navigationbar search quick_settings >` is `disable: < expand ICONS* alerts SYSTEM_INFO* back home recent clock navigationbar search quick_settings >`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}`.
 =================== 
The template of `updateLightsLocked,turn off notificationLight` is `updateLightsLocked,turn off notificationLight`.
 =================== 
Template: `getRingtonePlayer...`
 =================== 
Template: `updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}`.
 =================== 
The template of `updateLightsLocked,turn off notificationLight` is `updateLightsLocked,turn off notificationLight`.
 =================== 
Template: `overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}`.
 =================== 
Template: `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `onExpandingStarted`
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `onTrackingStarted`
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}`.
 =================== 
Template: `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}`.
 =================== 
Template: `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}`.
 =================== 
Template: `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}`.
 =================== 
Template: `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}`.
 =================== 
Template: `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `onTouchEvent::1, x={x}, y={y}`.
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `flingToHeight: vel={vel}, expand={expand}, target={target}, collapseSpeedUpFactor={collapseSpeedUpFactor}, expandBecauseOfFalsing={expandBecauseOfFalsing}`.
 =================== 
Template: `onTrackingStopped: {value}`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
The template of `updateClipping isOverlap:false, getTopPadding=333.0, Translation=-113.0` is `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `onExpandingFinished`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `Sending non-protected broadcast {action} from system {system}: {pkg}`.
 =================== 
Template: `logNotificationVisibilityChanges runInThread start`
 =================== 
Template: `onNotificationVisibilityChanged called`
 =================== 
Template: `logNotificationVisibilityChanges runInThread over`
 =================== 
Template: `isSimPinSecure mSimDatas is null or empty`
 =================== 
Template: `registerCallback not in UI.`
 =================== 
The template of `android.util.AndroidRuntimeException: Must execute in UI` is `android.util.AndroidRuntimeException: Must execute in UI`.
 =================== 
Template: `*** register callback for {callback}`.
 =================== 
Template: `registerCallback not in UI.`
 =================== 
The template of `android.util.AndroidRuntimeException: Must execute in UI` is `android.util.AndroidRuntimeException: Must execute in UI`.
 =================== 
Template: `*** unregister callback for null`
 =================== 
Template: `getDataEnabled: subId={subId} phoneId={phoneId}`.
 =================== 
Template: `[PhoneIntfMgr] getDataEnabled: subId={subId} retVal={retVal}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `onInterceptTouchEvent MotionEvent { action={action}, actionButton={actionButton}, id[0]={id[0]}, x[0]={x[0]}, y[0]={y[0]}, toolType[0]={toolType[0]}, buttonState={buttonState}, metaState={metaState}, flags={flags}, edgeFlags={edgeFlags}, pointerCount={pointerCount}, historySize={historySize}, eventTime={eventTime}, downTime={downTime}, deviceId={deviceId}, source={source} }, mBlockTouches={mBlockTouches}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `onInterceptTouchEvent MotionEvent { action={action}, actionButton={actionButton}, id[0]={id[0]}, x[0]={x[0]}, y[0]={y[0]}, toolType[0]={toolType[0]}, buttonState={buttonState}, metaState={metaState}, flags={flags}, edgeFlags={edgeFlags}, pointerCount={pointerCount}, historySize={historySize}, eventTime={eventTime}, downTime={downTime}, deviceId={deviceId}, source={source} }, mBlockTouches={mBlockTouches}`.
 =================== 
Template: `playSoundEffect   effectType: {effectType}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
Template: `animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}`.
 =================== 
Template: `onExpandingStarted`
 =================== 
Template: `logNotificationVisibilityChanges runInThread start`
 =================== 
Template: `onNotificationVisibilityChanged called`
 =================== 
Template: `logNotificationVisibilityChanges runInThread over`
 =================== 
Template: `START u0 {act={act} flg={flg} cmp={cmp} (has extras)} from uid {uid} on display {display}`.
 =================== 
Template: `ActivityRecord info: ActivityInfo{${activity}}, euid: ${euid}`.
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `onNotificationClick called`
 =================== 
Template: `cancelNotification,index:{index}`
 =================== 
Template: `cancelNotification,cancelNotificationLocked,callingUid = {callingUid},callingPid = {callingPid}`.
 =================== 
Template: `cancelNotificationLocked called,tell the app,reason = {reason}`
 =================== 
Template: `cancelNotificationLocked:{index}|{pkg}|{id}|{tag}|{uid}`.
 =================== 
Template: `cancelNotificationLocked,remove ={packageName}`.
 =================== 
Template: `applyOptionsLocked: Unknown animationType={animationType}`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `flingToHeight: vel={vel}, expand={expand}, target={target}, collapseSpeedUpFactor={collapseSpeedUpFactor}, expandBecauseOfFalsing={expandBecauseOfFalsing}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `Taking screenshot from Surface with crop:[{crop}], width:[{width}], height:[{height}], minLayer:[{minLayer}], maxLayer:[{maxLayer}], inRotation:[{inRotation}], rot:[{rot}]`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}`.
 =================== 
The template of `updateLightsLocked,turn off notificationLight` is `updateLightsLocked,turn off notificationLight`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `removeNotification:{index}|{pkg}|{id}|{tag}|{uid}`.
 =================== 
Template: `updateNotificationShade: total={total}, active={active}`.
 =================== 
Template: `animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `The change in focus caused us to need to do a layout begin`
 =================== 
Template: `The change in focus caused us to need to do a layout end`
 =================== 
Template: `overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}`.
 =================== 
Template: `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelAutohide`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}`.
 =================== 
Template: `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}`.
 =================== 
Template: `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateNotificationShade: total={total}, active={active}`.
 =================== 
Template: `removeNotificationChildren`
 =================== 
Template: `onExpandingFinished`
 =================== 
Template: `updateNotificationShade: total={total}, active={active}`.
 =================== 
Template: `removeNotificationChildren`
 =================== 
Template: `Sending non-protected broadcast {action} from system {system}: {pkg}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`.
 =================== 
Template: `getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`.
 =================== 
Template: `getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelAutohide`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
Template: `makeExpandedInvisible: mExpandedVisible={mExpandedVisible}`
 =================== 
Template: `closeQs`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `instantCollapse`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `closeQs`
 =================== 
Template: `resumeSuspendedAutohide`
 =================== 
The template of `disable: < expand icons* alerts system_info* back home recent clock navigationbar search quick_settings >` is `disable: < {options} >`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `registerCallback not in UI.`
 =================== 
The template of `android.util.AndroidRuntimeException: Must execute in UI` is `android.util.AndroidRuntimeException: Must execute in UI`.
 =================== 
Template: `*** unregister callback for {callback}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `isMusicActive...`
 =================== 
Template: `isMusicActive...`
 =================== 
Template: `Start dump, calling from : pid={pid}, uid={uid}`.
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `setWiredDeviceConnectionState  type: {type}  state: {state}`.
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setWiredDeviceConnectionState  type: {type}  state: {state}`.
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `isMusicActive...`
 =================== 
Template: `ActivityManagerService,attachApplication,callingPid = {callingPid}`.
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `isBluetoothA2dpOn...`
 =================== 
Template: `isMusicActive...`
 =================== 
Template: `isBluetoothScoOn...`
 =================== 
Template: `getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
Template: `getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `getDevicesForStream  streamType: {streamType}`
 =================== 
Template: `getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
Template: `getDevicesForStream  streamType: {streamType}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
Template: `getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
Template: `getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
Template: `getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
Template: `getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
Template: `cleanUpApplicationRecord -- {value}`
 =================== 
Template: `cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}`.
 =================== 
Template: `cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`.
 =================== 
Template: `stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={value}`.
 =================== 
Template: `stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={mWifiDisplayScanRequestCount}`.
 =================== 
Template: `getMode...`
 =================== 
Template: `setSpeakerphoneOn  on: {on}`
 =================== 
Template: `setSpeakerphoneOn on:{on}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
The template of `release:lock=..., flg=..., tag=..., name=..., ws=..., uid=..., pid=...` is `release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `sending alarm Alarm{${alarm} type ${type} when ${when} PendingIntent{${pendingIntent}}},repeatInterval = ${repeatInterval},listenerTag =${listenerTag}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `Received TIME_TICK alarm; rescheduling`
 =================== 
Template: `scheduleTimeTickEvent triggerAtTime = {triggerAtTime}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `received broadcast android.intent.action.TIME_TICK`
 =================== 
Template: `handleTimeUpdate`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `playSoundEffect   effectType: {effectType}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
The template of `Destroying surface Surface(name=PopupWindow:9b04807) called by com.android.server.wm.WindowStateAnimator.destroySurface:2060 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:913 com.android.server.wm.WindowState.removeLocked:1554 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2739 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2702 com.android.server.wm.WindowManagerService.removeWindowLocked:2691 com.android.server.wm.WindowManagerService.re` is `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `getNeighboringCellInfo calling app is {app}`.
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
The template of `Destroying surface Surface(name=PopupWindow:9b04807) called by com.android.server.wm.WindowStateAnimator.destroySurface:2060 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:913 com.android.server.wm.WindowState.removeLocked:1554 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2739 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2702 com.android.server.wm.WindowManagerService.removeWindowLocked:2691 com.android.server.wm.WindowManagerService.re` is `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `isMusicActive...`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `playSoundEffect   effectType: {effectType}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
The template of `Destroying surface Surface(name=PopupWindow:9b04807) called by com.android.server.wm.WindowStateAnimator.destroySurface:2060 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:913 com.android.server.wm.WindowState.removeLocked:1554 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2739 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2702 com.android.server.wm.WindowManagerService.removeWindowLocked:2691 com.android.server.wm.WindowManagerService.re` is `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `isMusicActive...`
 =================== 
Template: `sending alarm Alarm{ {alarmId} type {type} when {when} PendingIntent{ {pendingIntentId}: PendingIntentRecord{ {packageName} {intentType}}}},repeatInterval = {repeatInterval},listenerTag ={listenerTag}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `Killing 23484:com.android.calendar/u0a13 (adj 906): empty for 1810s` is `Killing {pid}:{processName}/{userId} (adj {adj}): empty for {duration}s`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={value}`.
 =================== 
Template: `stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={mWifiDisplayScanRequestCount}`.
 =================== 
Template: `cleanUpApplicationRecord -- {value}`
 =================== 
Template: `cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}`.
 =================== 
Template: `cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`.
 =================== 
Template: `stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={value}`.
 =================== 
Template: `stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={mWifiDisplayScanRequestCount}`.
 =================== 
Template: `cleanUpApplicationRecord -- {value}`
 =================== 
Template: `cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}`.
 =================== 
Template: `cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`.
 =================== 
Template: `stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={value}`.
 =================== 
Template: `stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={mWifiDisplayScanRequestCount}`.
 =================== 
Template: `cleanUpApplicationRecord -- {value}`
 =================== 
Template: `cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}`.
 =================== 
Template: `cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`.
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `isMusicActive...`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `isMusicActive...`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `sending alarm Alarm{c1705d3 type 3 when 509202333 PendingIntent{1749923: PendingIntentRecord{9600e20 android broadcastIntent}}},repeatInterval = {repeatInterval},listenerTag ={listenerTag}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `Received TIME_TICK alarm; rescheduling`
 =================== 
Template: `scheduleTimeTickEvent triggerAtTime = {triggerAtTime}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `received broadcast android.intent.action.TIME_TICK`
 =================== 
Template: `handleTimeUpdate`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `remove({pendingIntent}) changed bounds; rebatching`
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `getNeighboringCellInfo calling app is {app}`.
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `Unable to start service Intent { act={act} cmp={cmp} } U={U}: not found`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `getNeighboringCellInfo calling app is {app}`.
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `getNeighboringCellInfo calling app is {app}`.
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `unregisterAudioFocusListener...`
 =================== 
Template: `abandonAudioFocus`
 =================== 
Template: `[HSM] stayAwake {value} uid: {uid}, pid: {pid}`.
 =================== 
Template: `Pid:{pid} MediaPlayer destructor`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={value}`.
 =================== 
Template: `stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={mWifiDisplayScanRequestCount}`.
 =================== 
Template: `Process {processName} (pid {pid}) has died`
 =================== 
Template: `cleanUpApplicationRecord -- {value}`
 =================== 
Template: `Scheduling restart of crashed service {service} in {time}ms`
 =================== 
Template: `cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}`.
 =================== 
Template: `cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`.
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `isMusicActive...`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `new Process app=ProcessRecord{${processRecord} ${processName}/${userId}}, name: ${processName}, euid: ${euid}`.
 =================== 
Template: `Start proc {pid}:{processName} for service {serviceName}`.
 =================== 
Template: `ActivityManagerService,attachApplication,callingPid = {callingPid}`.
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
Template: `interceptKeyBeforeQueueing: key {key} , result : {result}`.
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `resumeSuspendedAutohide`
 =================== 
Template: `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
Template: `interceptKeyBeforeQueueing: key {key} , result : {result}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
Template: `interceptKeyBeforeQueueing: key {key} , result : {result}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `resumeSuspendedAutohide`
 =================== 
Template: `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
Template: `interceptKeyBeforeQueueing: key {key} , result : {result}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
Template: `isMusicActive...`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
Template: `interceptKeyBeforeQueueing: key {key} , result : {result}`.
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `resumeSuspendedAutohide`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
Template: `interceptKeyBeforeQueueing: key {key} , result : {result}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}`.
 =================== 
Template: `closeQs`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `instantCollapse`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `Taking screenshot from Surface with crop:[{crop}], width:[{width}], height:[{height}], minLayer:[{minLayer}], maxLayer:[{maxLayer}], inRotation:[{inRotation}], rot:[{rot}]`
 =================== 
Template: `The change in focus caused us to need to do a layout begin`
 =================== 
Template: `The change in focus caused us to need to do a layout end`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelAutohide`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`.
 =================== 
Template: `getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`.
 =================== 
Template: `getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`.
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelAutohide`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `ActivityManagerService,attachApplication,callingPid = {callingPid}`.
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={value}`.
 =================== 
Template: `stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={mWifiDisplayScanRequestCount}`.
 =================== 
Template: `cleanUpApplicationRecord -- {value}`
 =================== 
Template: `cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}`.
 =================== 
Template: `cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`.
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `enqueueNotificationInternal: pkg={pkg} id={id} notification={notification}`.
 =================== 
Template: `enqueueNotificationInternal: n.getKey = {key}|{pkg}|{id}|{tag}|{uid}`.
 =================== 
Template: `getRingerMode...`
 =================== 
Template: `updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}`
 =================== 
The template of `updateLightsLocked,turn off notificationLight` is `updateLightsLocked,turn off notificationLight`.
 =================== 
Template: `addNotification key={key}|{pkg}|{id}|{tag}|{uid}`.
 =================== 
Template: `mHeadsUpExistenceChangedRunnable`
 =================== 
The template of `disable: < expand ICONS* alerts SYSTEM_INFO* back home recent clock navigationbar search quick_settings >` is `disable: < expand ICONS* alerts SYSTEM_INFO* back home recent clock navigationbar search quick_settings >`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `updateNotificationShade: total={total}, active={active}`.
 =================== 
Template: `removeNotificationChildren`
 =================== 
Template: `updateNotificationShade: total={total}, active={active}`.
 =================== 
Template: `removeNotificationChildren`
 =================== 
Template: `Marking notification as seen {seen}|{package}|{id}|{tag}|{uid}`.
 =================== 
Template: `onNotificationExpansionChanged called`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `logNotificationVisibilityChanges runInThread start`
 =================== 
Template: `onNotificationVisibilityChanged called`
 =================== 
Template: `logNotificationVisibilityChanges runInThread over`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `playSoundEffect   effectType: {effectType}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
Template: `START u0 {act={act} cat={cat} flg={flg} cmp={cmp} bnds={bnds}} from uid {uid} on display {display}`.
 =================== 
The template is `ActivityRecord info: ActivityInfo{f39182 com.example.android.notepad.NotePadActivity}, euid: {euid}`.
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `rotationForOrientationLw(orient={orient}, last={last}); user={user} USER_ROTATION_LOCKED`
 =================== 
Template: `Application requested orientation {orientation}, got rotation {rotation} which has compatible metrics`
 =================== 
Template: `The change in focus caused us to need to do a layout begin`
 =================== 
Template: `The change in focus caused us to need to do a layout end`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelAutohide`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`.
 =================== 
Template: `getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`.
 =================== 
Template: `getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}`.
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelAutohide`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `updateNotificationShade: total={total}, active={active}`.
 =================== 
Template: `removeNotificationChildren`
 =================== 
Template: `overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}`.
 =================== 
Template: `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `ACTIVITY check resid: {resid}, size={size}`.
 =================== 
Template: `mHeadsUpExistenceChangedRunnable`
 =================== 
Template: `updateNotificationShade: total={total}, active={active}`.
 =================== 
Template: `removeNotificationChildren`
 =================== 
Template: `overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}`.
 =================== 
Template: `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `makeExpandedInvisible: mExpandedVisible={mExpandedVisible}`
 =================== 
Template: `closeQs`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `instantCollapse`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `closeQs`
 =================== 
Template: `logNotificationVisibilityChanges runInThread start`
 =================== 
Template: `onNotificationVisibilityChanged called`
 =================== 
Template: `resumeSuspendedAutohide`
 =================== 
The template of `disable: < expand icons* alerts system_info* back home recent clock navigationbar search quick_settings >` is `disable: < {options} >`.
 =================== 
Template: `logNotificationVisibilityChanges runInThread over`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `playSoundEffect   effectType: {effectType}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `ActivityManagerService,attachApplication,callingPid = {callingPid}`.
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `ACTIVITY check resid: {resid}, size={size}`.
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
Template: `interceptKeyBeforeQueueing: key {key} , result : {result}`.
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `resumeSuspendedAutohide`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
Template: `interceptKeyBeforeQueueing: key {key} , result : {result}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
Template: `animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}`.
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `closeQs`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `instantCollapse`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `rotationForOrientationLw(orient={orient}, last={last}); user={user} USER_ROTATION_LOCKED`
 =================== 
Template: `Application requested orientation {orientation}, got rotation {rotation} which has compatible metrics`
 =================== 
Template: `Taking screenshot from Surface with crop:[{crop}], width:[{width}], height:[{height}], minLayer:[{minLayer}], maxLayer:[{maxLayer}], inRotation:[{inRotation}], rot:[{rot}]`
 =================== 
Template: `The change in focus caused us to need to do a layout begin`
 =================== 
Template: `The change in focus caused us to need to do a layout end`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelAutohide`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`.
 =================== 
Template: `getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`.
 =================== 
Template: `getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}`.
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelAutohide`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}`.
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}`.
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRingerMode...`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
Template: `suspendAutohide`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
Template: `interceptKeyBeforeQueueing: key {key} , result : {result}`.
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `resumeSuspendedAutohide`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
Template: `interceptKeyBeforeQueueing: key {key} , result : {result}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}`.
 =================== 
Template: `closeQs`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `instantCollapse`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `playSoundEffect   effectType: {effectType}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
Template: `START u0 {act={act} cat={cat} flg={flg} cmp={cmp} bnds={bnds}} from uid {uid} on display {display}`.
 =================== 
The template is `ActivityRecord info: ActivityInfo{${activityInfo}}, euid: ${euid}`.
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `The change in focus caused us to need to do a layout begin`
 =================== 
Template: `The change in focus caused us to need to do a layout end`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelAutohide`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`.
 =================== 
Template: `getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`.
 =================== 
Template: `getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotification,index:{index}`
 =================== 
Template: `cancelNotification,cancelNotificationLocked,callingUid = {callingUid},callingPid = {callingPid}`.
 =================== 
Template: `cancelNotificationLocked called,tell the app,reason = {reason}`.
 =================== 
Template: `cancelNotificationLocked:{index}|{pkg}|{id}|{tag}|{uid}`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotificationLocked,remove ={remove}`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}`.
 =================== 
The template of `updateLightsLocked,turn off notificationLight` is `updateLightsLocked,turn off notificationLight`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelAutohide`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `removeNotification:{index}|{pkg}|{id}|{tag}|{uid}`.
 =================== 
Template: `updateNotificationShade: total={total}, active={active}`.
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `removeNotificationChildren`
 =================== 
Template: `animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}`.
 =================== 
Template: `closeQs`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `instantCollapse`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
Template: `cancelNotification,index:{index}`.
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `getAllCellInfo is blocked by permission manager . callingPackage = {callingPackage}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `isMusicActive...`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `playSoundEffect   effectType: {effectType}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `getAllCellInfo is blocked by permission manager . callingPackage = {callingPackage}`.
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `getCellLocation is blocked by permission manager uid:{uid} pid:{pid}`.
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `shouldBlockLocation running ...`
 =================== 
Template: `shouldBlockLocation  ret:{ret}`
 =================== 
Template: `getAllCellInfo is blocked by permission manager . callingPackage = {callingPackage}`.
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `isMusicActive...`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `sending alarm Alarm{${alarm} type ${type} when ${when} PendingIntent{${pendingIntent}}},repeatInterval = ${repeatInterval},listenerTag =${listenerTag}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `Received TIME_TICK alarm; rescheduling`
 =================== 
Template: `scheduleTimeTickEvent triggerAtTime = {triggerAtTime}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `received broadcast android.intent.action.TIME_TICK`
 =================== 
Template: `handleTimeUpdate`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `playSoundEffect   effectType: {effectType}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `isWiredHeadsetOn...`
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setDataSource({arg1}, {arg2}, {arg3})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `getStreamVolume  treamType: {streamType}`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `Destroying surface Surface(name=InputMethod) called by {caller}:2060 {method1}:913 {method2}:2201 {method3}:517 {method4}:291 {method5}:233 {method6}`.
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `playSoundEffect   effectType: {effectType}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `updateIsPoweredLocked: wasPowered={wasPowered}, mIsPowered={mIsPowered}, oldPlugType={oldPlugType}, mPlugType={mPlugType}, mBatteryLevel={mBatteryLevel}`.
 =================== 
Template: `received broadcast android.intent.action.BATTERY_CHANGED`
 =================== 
Template: `ACTION_BATTERY_CHANGED AMP: {amp}; Volt: {volt}`.
 =================== 
Template: `updateChargingLocked: charging={charging}`
 =================== 
Template: `onReceive, action:{action}`
 =================== 
Template: `ACTION_BATTERY_CHANGED pluggedType: {pluggedType}`.
 =================== 
Template: `ApStaDisabledState what={what}`.
 =================== 
Template: `DefaultState what={what}`.
 =================== 
Template: `battery changed pluggedType: {pluggedType}`
 =================== 
Template: `RefreshBatteryInfo isBatteryLow: {isBatteryLow}`
 =================== 
The template of `ChargingSpeed  Wattage: -1 ST: 5000000 --> 7500000` is `ChargingSpeed  Wattage: -1 ST: {startWattage} --> {endWattage}`.
 =================== 
Template: `handleBatteryUpdate`
 =================== 
Template: `RefreshBatteryInfo isBatteryLow: {isBatteryLow}`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
Template: `interceptKeyBeforeQueueing: key {key} , result : {result}`.
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `resumeSuspendedAutohide`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
Template: `interceptKeyBeforeQueueing: key {key} , result : {result}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}`.
 =================== 
Template: `closeQs`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `instantCollapse`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `setLightsOn(true)`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `Taking screenshot from Surface with crop:[{crop}], width:[{width}], height:[{height}], minLayer:[{minLayer}], maxLayer:[{maxLayer}], inRotation:[{inRotation}], rot:[{rot}]`
 =================== 
Template: `The change in focus caused us to need to do a layout begin`
 =================== 
Template: `The change in focus caused us to need to do a layout end`
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelAutohide`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`.
 =================== 
Template: `getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`.
 =================== 
Template: `getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`.
 =================== 
Template: `setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
Template: `cancelAutohide`
 =================== 
Template: `notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`.
 =================== 
Template: `getRingerMode...`
 =================== 
Template: `release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `enqueueNotificationInternal: pkg={pkg} id={id} notification={notification}`.
 =================== 
Template: `enqueueNotificationInternal: n.getKey = {key}|{packageName}|{id}|{tag}|{uid}`.
 =================== 
Template: `updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}`
 =================== 
The template of `updateLightsLocked,turn off notificationLight` is `updateLightsLocked,turn off notificationLight`.
 =================== 
Template: `addNotification key={key}|{packageName}|{id}|{tag}|{uid}`.
 =================== 
Template: `mHeadsUpExistenceChangedRunnable`
 =================== 
The template of `disable: < expand ICONS* alerts SYSTEM_INFO* back home recent clock navigationbar search quick_settings >` is `disable: < expand ICONS* alerts SYSTEM_INFO* back home recent clock navigationbar search quick_settings >`.
 =================== 
Template: `suspendAutohide`
 =================== 
Template: `updateNotificationShade: total={total}, active={active}`.
 =================== 
Template: `removeNotificationChildren`
 =================== 
Template: `updateNotificationShade: total={total}, active={active}`.
 =================== 
Template: `removeNotificationChildren`
 =================== 
Template: `Marking notification as seen {seen}|{packageName}|{id}|{tag}|{uid}`.
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `onNotificationExpansionChanged called`
 =================== 
Template: `Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `sending alarm Alarm{${alarmId} type ${type} when ${when} PendingIntent{${pendingIntent}}},repeatInterval = ${repeatInterval},listenerTag =${listenerTag}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `logNotificationVisibilityChanges runInThread start`
 =================== 
Template: `onNotificationVisibilityChanged called`
 =================== 
Template: `logNotificationVisibilityChanges runInThread over`
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `onInterceptTouchEvent MotionEvent { action={action}, actionButton={actionButton}, id[0]={id[0]}, x[0]={x[0]}, y[0]={y[0]}, toolType[0]={toolType[0]}, buttonState={buttonState}, metaState={metaState}, flags={flags}, edgeFlags={edgeFlags}, pointerCount={pointerCount}, historySize={historySize}, eventTime={eventTime}, downTime={downTime}, deviceId={deviceId}, source={source} }, mBlockTouches={mBlockTouches}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `onInterceptTouchEvent MotionEvent { action={action}, actionButton={actionButton}, id[0]={id[0]}, x[0]={x[0]}, y[0]={y[0]}, toolType[0]={toolType[0]}, buttonState={buttonState}, metaState={metaState}, flags={flags}, edgeFlags={edgeFlags}, pointerCount={pointerCount}, historySize={historySize}, eventTime={eventTime}, downTime={downTime}, deviceId={deviceId}, source={source} }, mBlockTouches={mBlockTouches}`.
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `playSoundEffect   effectType: {effectType}`.
 =================== 
Template: `querySoundEffectsEnabled...`
 =================== 
Template: `updateNotificationShade: total={total}, active={active}`.
 =================== 
Template: `removeNotificationChildren`
 =================== 
Template: `animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}`.
 =================== 
Template: `closeQs`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `instantCollapse`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `updateNotificationShade: total={total}, active={active}`.
 =================== 
Template: `removeNotificationChildren`
 =================== 
Template: `logNotificationVisibilityChanges runInThread start`
 =================== 
Template: `onNotificationVisibilityChanged called`
 =================== 
Template: `logNotificationVisibilityChanges runInThread over`
 =================== 
Template: `START u0 {flg={flg} cmp={cmp} (has extras)} from uid {uid} on display {display}`.
 =================== 
The template is `ActivityRecord info: ActivityInfo{${activityInfo}}, euid: ${euid}`.
 =================== 
Template: `overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}`.
 =================== 
Template: `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `makeExpandedInvisible: mExpandedVisible={mExpandedVisible}`
 =================== 
Template: `closeQs`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `instantCollapse`
 =================== 
Template: `cancelPeek: {value}`
 =================== 
Template: `updateNotificationShade: total={total}, active={active}`.
 =================== 
Template: `removeNotificationChildren`
 =================== 
Template: `closeQs`
 =================== 
Template: `startActivity called from non-Activity context; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
Template: `resumeSuspendedAutohide`
 =================== 
The template of `disable: < expand icons* alerts system_info* back home recent clock navigationbar search quick_settings >` is `disable: < {options} >`.
 =================== 
Template: `overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}`.
 =================== 
Template: `state.clipTopAmount:{clipTopAmount}, i:{i}`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `makeExpandedInvisible: mExpandedVisible={mExpandedVisible}`
 =================== 
Template: `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
The template of `ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0` is `ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`.
 =================== 
Template: `Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
Template: `onNotificationClick called`
 =================== 
Template: `cancelNotification,index:{index}`
 =================== 
Template: `applyOptionsLocked: Unknown animationType={animationType}`
 =================== 
Template: `getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output`
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`.
 =================== 
Template: `getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
Template: `getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`.
 =================== 
Template: `getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI}`.
 =================== 
Template: `mHeadsUpExistenceChangedRunnable`
 =================== 
Template: `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
Template: `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
Template: `HBM brightnessIn ={value}`
 =================== 
Template: `HBM brightnessOut ={value}`
 =================== 
Template: `Animating brightness: target={target}, rate={rate}`
 =================== 
