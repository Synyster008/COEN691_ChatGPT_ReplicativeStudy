,EventTemplate,Occurrences
0,"setSystemUiVisibility vis=<*> mask=<*> oldVal=<*> newVal=<*> diff=<*> fullscreenStackVis=<*> dockedStackVis=<*>, fullscreenStackBounds=Rect(<*>), dockedStackBounds=Rect(<*>)",200
1,"ready=<*>,policy=<*>,wakefulness=<*>,wksummary=<*>,uasummary=<*>,bootcompleted=<*>,boostinprogress=<*>,waitmodeenable=<*>,mode=<*>,manual=<*>,auto=<*>,adj=<*>=<*>",199
2,setLightsOn(<*>),181
3,HBM brightnessIn =<*>,85
4,HBM brightnessOut =<*>,85
5,"Animating brightness: target=<*>, rate=<*>",85
6,getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output,81
7,"userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=<*>, uid=<*>",69
8,"updateClipping isOverlap:<*>, getTopPadding=<*>, Translation=<*>",65
9,updateDimmedActivatedHideSensitive overlap:<*>,65
10,"Skipping, withExcluded: <*>, tr.intent:<*>",63
11,shouldBlockLocation running ...,37
12,shouldBlockLocation ret:<*>,37
13,getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output,37
14,"Releasing suspend blocker ""PowerManagerService.WakeLocks"".",33
15,"Acquiring suspend blocker ""PowerManagerService.WakeLocks"".",33
16,"acquire lock=<*>, flags=<*>, tag=""<*>"", name=<*>, ws=<*>, uid=<*>, pid=<*>",26
17,suspendAutohide,23
18,"cancelNotification,index:<*>",23
19,cancelPeek: <*>,20
20,"cancelNotificationWithTag pid <*>,uid = <*>,tag = <*>,pkg =<*>,id =<*>",20
21,"notifyUiVisibilityChanged:vis=<*>, SystemUiVisibility=<*>",19
22,Destroying surface Surface(name=<*>) called by <*> <*> <*> <*> <*> <*>,19
23,querySoundEffectsEnabled...,17
24,cancelAutohide,15
25,interceptKeyTq keycode=<*> interactive=<*> keyguardActive=<*> policyFlags=<*> down <*> canceled <*>,14
26,"interceptKeyBeforeQueueing: key <*> , result : <*>",14
27,"getRecentTasks: num=<*>,flags=<*>,totalTasks=<*>",14
28,"release:lock=<*>, flg=<*>, tag=""<*>"", name=<*>"", ws=<*>, uid=<*>, pid=<*>",13
29,"release:lock=<*>, flg=<*>, tag=""<*>"", name=<*>, ws=<*>, uid=<*>, pid=<*>",13
30,"state.clipTopAmount:<*>, i:<*>",13
31,"updateNotificationShade: total=<*>, active=<*>",13
32,removeNotificationChildren,12
33,closeQs,12
34,isMusicActive...,12
35,"overlapAmount:<*>, previousNotificationEnd:<*>, newYTranslation:<*>, location:<*>, i:<*>, getTopPadding:<*>, getLocationOnScreen():{getLocationOnScreen()}",11
36,resumeSuspendedAutohide,10
37,playSoundEffect effectType: <*>,10
38,instantCollapse,9
39,getLastAudibleStreamVolume treamType: <*>,9
40,"animateCollapsePanels:flags=<*>, force=<*>, delayed=<*>, mExpandedVisible=<*>",8
41,getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity},8
42,"updateLightsLocked,mInCall =<*>,mScreenOn = <*>,ledNotification == <*>",6
43,"updateLightsLocked,turn off notificationLight",6
44,logNotificationVisibilityChanges runInThread start,6
45,onNotificationVisibilityChanged called,6
46,logNotificationVisibilityChanges runInThread over,6
47,The change in focus caused us to need to do a layout begin,6
48,The change in focus caused us to need to do a layout end,6
49,cleanUpApplicationRecord -- <*>,6
50,"cleanUpApplicationRecordLocked, pid: <*>, restart: <*>",6
51,"cleanUpApplicationRecordLocked, reset pid: <*>, euid: <*>",6
52,stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=<*>,6
53,stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*>,6
54,mVisiblity.getValue is <*>,5
55,getNeighboringCellInfo calling app is <*>,5
56,"onInterceptTouchEvent MotionEvent { action=<*>, actionButton=<*>, id[<*>]={id[<*>]}, x[<*>]={x[<*>]}, y[<*>]={y[<*>]}, toolType[<*>]={toolType[<*>]}, buttonState=<*>, metaState=<*>, flags=<*>, edgeFlags=<*>, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=<*> }, mBlockTouches=<*>",4
57,"Taking screenshot from Surface with crop:[<*>], width:[<*>], height:[<*>], minLayer:[<*>], maxLayer:[<*>], inRotation:[<*>], rot:[<*>]",4
58,makeExpandedInvisible: mExpandedVisible=<*>,4
59,"ActivityManagerService,attachApplication,callingPid = <*>",4
60,mHeadsUpExistenceChangedRunnable,4
61,getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor},4
62,"rotationForOrientationLw(orient=<*>, last=<*>); user=<*> USER_ROTATION_LOCKED",3
63,"Application requested orientation <*>, got rotation <*> which has compatible metrics",3
64,disable: < expand ICONS* alerts SYSTEM_INFO* back home recent clock navigationbar search quick_settings >,3
65,registerCallback not in UI.,3
66,android.util.AndroidRuntimeException: Must execute in UI,3
67,"ActivityRecord info: ActivityInfo{$<*>}, euid: $<*>",3
68,disable: < <*> >,3
69,"sending alarm Alarm{$<*> type $<*> when $<*> PendingIntent{$<*>}},repeatInterval = $<*>,listenerTag =$<*>",3
70,Received TIME_TICK alarm; rescheduling,3
71,scheduleTimeTickEvent triggerAtTime = <*>,3
72,received broadcast android.intent.action.TIME_TICK,3
73,handleTimeUpdate,3
74,getRingerMode...,3
75,getAllCellInfo is blocked by permission manager . callingPackage = <*>,3
76,Skipping AppWindowToken{placeholder token=Token{placeholder <*>}} -- going to hide,2
77,remove(<*>) changed bounds; rebatching,2
78,Skipping AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}} -- going to hide,2
79,"onTouchEvent::<*>, x=<*>, y=<*>",2
80,getRingtonePlayer...,2
81,onExpandingStarted,2
82,"overlapAmount:<*>, previousNotificationEnd:<*>, newYTranslation:<*>, location:<*>, i:<*>, getTopPadding:<*>, getLocationOnScreen():<*>",2
83,"flingToHeight: vel=<*>, expand=<*>, target=<*>, collapseSpeedUpFactor=<*>, expandBecauseOfFalsing=<*>",2
84,onExpandingFinished,2
85,Sending non-protected broadcast <*> from system <*>: <*>,2
86,*** unregister callback for <*>,2
87,onNotificationClick called,2
88,"cancelNotification,cancelNotificationLocked,callingUid = <*>,callingPid = <*>",2
89,"cancelNotificationLocked called,tell the app,reason = <*>",2
90,cancelNotificationLocked:<*>|<*>|<*>|<*>|<*>,2
91,"cancelNotificationLocked,remove =<*>",2
92,applyOptionsLocked: Unknown animationType=<*>,2
93,removeNotification:<*>|<*>|<*>|<*>|<*>,2
94,setWiredDeviceConnectionState type: <*> state: <*>,2
95,getDevicesForStream streamType: <*>,2
96,enqueueNotificationInternal: pkg=<*> id=<*> notification=<*>,2
97,enqueueNotificationInternal: n.getKey = <*>|<*>|<*>|<*>|<*>,2
98,addNotification key=<*>|<*>|<*>|<*>|<*>,2
99,Marking notification as seen <*>|<*>|<*>|<*>|<*>,2
100,onNotificationExpansionChanged called,2
101,START u0 {act=<*> cat=<*> flg=<*> cmp=<*> bnds=<*>} from uid <*> on display <*>,2
102,"ACTIVITY check resid: <*>, size=<*>",2
103,Destroying surface Surface(name=<*>) called by <*>,2
104,RefreshBatteryInfo isBatteryLow: <*>,2
105,getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI},2
106,"printFreezingDisplayLogsopening app wtoken = AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}}, allDrawn= <*>, startingDisplayed = <*>, startingMoved = <*>, isRelaunching = <*>",1
107,visible is system.time.showampm,1
108,visible is system.charge.show,1
109,visible is system.call.count gt <*>,1
110,visible is system.message.count gt <*>,1
111,visible is system.ownerinfo.show,1
112,Destroying surface Surface(name=<*>) called by <*> <*> <*> <*> <*>,1
113,Destroying surface Surface(name=<*>) called by <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> android.view.IWindowS,1
114,"orientation change is complete, call stopFreezingDisplayLocked",1
115,Screen frozen for +<*> due to <*>,1
116,startAnimation begin,1
117,startAnimation end,1
118,Bad activity token: <*>,1
119,java.lang.ClassCastException: android.os.BinderProxy cannot be cast to com.android.server.am.ActivityRecord$Token,1
120,schedulePeek,1
121,onTrackingStarted,1
122,onTrackingStopped: <*>,1
123,isSimPinSecure mSimDatas is <*> or empty,1
124,*** register callback for <*>,1
125,getDataEnabled: subId=<*> phoneId=<*>,1
126,[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=<*>,1
127,START u0 {act=<*> flg=<*> cmp=<*> (has extras)} from uid <*> on display <*>,1
128,"Start dump, calling from : pid=<*>, uid=<*>",1
129,isBluetoothA2dpOn...,1
130,isBluetoothScoOn...,1
131,getMode...,1
132,setSpeakerphoneOn on: <*>,1
133,setSpeakerphoneOn on:<*>,1
134,"sending alarm Alarm{ <*> type <*> when <*> PendingIntent{ <*>: PendingIntentRecord{ <*> <*>}}},repeatInterval = <*>,listenerTag =<*>",1
135,Killing <*>/<*> (adj <*>): empty for <*>,1
136,"sending alarm Alarm{c1705d3 type <*> when <*> PendingIntent{<*>: <*>}},repeatInterval = <*>,listenerTag =<*>",1
137,Unable to start service Intent { act=<*> cmp=<*> } U=<*>: not found,1
138,unregisterAudioFocusListener...,1
139,abandonAudioFocus,1
140,"[HSM] stayAwake <*> uid: <*>, pid: <*>",1
141,Pid:<*> MediaPlayer destructor,1
142,Process <*> (pid <*>) has died,1
143,Scheduling restart of crashed service <*> in <*>,1
144,"new Process app=ProcessRecord{$<*> $<*>/$<*>}, name: $<*>, euid: $<*>",1
145,Start proc <*> for service <*>,1
146,"ActivityRecord info: <*>, euid: <*>",1
147,Destroying surface Surface(name=<*>) called by <*> <*> <*> <*> <*> <*> <*>,1
148,getCellLocation is blocked by permission manager uid:<*> pid:<*>,1
149,isWiredHeadsetOn...,1
150,"setDataSource(<*>, <*>, <*>)",1
151,getStreamVolume treamType: <*>,1
152,Destroying surface Surface(name=InputMethod) called by <*> <*> <*> <*> <*> <*> <*>,1
153,"updateIsPoweredLocked: wasPowered=<*>, mIsPowered=<*>, oldPlugType=<*>, mPlugType=<*>, mBatteryLevel=<*>",1
154,received broadcast android.intent.action.BATTERY_CHANGED,1
155,ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*>,1
156,updateChargingLocked: charging=<*>,1
157,"onReceive, action:<*>",1
158,ACTION_BATTERY_CHANGED pluggedType: <*>,1
159,ApStaDisabledState what=<*>,1
160,DefaultState what=<*>,1
161,battery changed pluggedType: <*>,1
162,ChargingSpeed Wattage: -<*> ST: <*> --> <*>,1
163,handleBatteryUpdate,1
164,START u0 {flg=<*> cmp=<*> (has extras)} from uid <*> on display <*>,1
165,startActivity called from non-Activity context; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent { flg=<*> cmp=<*> (has extras) },1
