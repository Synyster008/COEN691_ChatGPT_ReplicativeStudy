,EventTemplate,Occurrences
0,"printFreezingDisplayLogsopening app wtoken = AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}}, allDrawn= {allDrawn}, startingDisplayed =  {startingDisplayed}, startingMoved =  {startingMoved}, isRelaunching =  {isRelaunching}",1
1,"acquire lock={lock}, flags={flags}, tag=""{tag}"", name={name}, ws={ws}, uid={uid}, pid={pid}",26
2,"ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}",199
3,Skipping AppWindowToken{placeholder token=Token{placeholder ActivityRecord{placeholder}}} -- going to hide,2
4,visible is system.time.showampm,1
5,mVisiblity.getValue is {value},5
6,visible is system.charge.show,1
7,visible is system.call.count gt 0,1
8,visible is system.message.count gt 0,1
9,visible is system.ownerinfo.show,1
10,"release:lock={lock}, flg={flg}, tag=""{tag}"", name={name}"", ws={ws}, uid={uid}, pid={pid}",13
11,"updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}",65
12,updateDimmedActivatedHideSensitive overlap:{overlap},65
13,getRunningAppProcesses: caller {caller} does not hold REAL_GET_TASKS; limiting output,81
14,"release:lock={lock}, flg={flg}, tag=""{tag}"", name={name}, ws={ws}, uid={uid}, pid={pid}",13
15,"setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})",200
16,cancelAutohide,15
17,"notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}",19
18,Destroying surface Surface(name={name}) called by {caller}:{line} {nextCaller}:{nextLine} {nextNextCaller}:{nextNextLine} {nextNextNextCaller}:{nextNextNextLine} {bottomOfCallStack},1
19,Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} android.view.IWindowS,1
20,"userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}",69
21,"orientation change is complete, call stopFreezingDisplayLocked",1
22,Screen frozen for +{time}s{ms} due to {window},1
23,startAnimation begin,1
24,startAnimation end,1
25,remove({pendingIntent}) changed bounds; rebatching,2
26,"rotationForOrientationLw(orient={orient}, last={last}); user={user} USER_ROTATION_LOCKED",3
27,"Application requested orientation {orientation}, got rotation {rotation} which has compatible metrics",3
28,shouldBlockLocation running ...,37
29,shouldBlockLocation  ret:{ret},37
30,getNeighboringCellInfo calling app is {app},5
31,"Releasing suspend blocker ""PowerManagerService.WakeLocks"".",33
32,HBM brightnessIn ={value},85
33,HBM brightnessOut ={value},85
34,"Animating brightness: target={target}, rate={rate}",85
35,suspendAutohide,23
36,interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled},14
37,"interceptKeyBeforeQueueing: key {key} , result : {result}",14
38,resumeSuspendedAutohide,10
39,querySoundEffectsEnabled...,17
40,"Acquiring suspend blocker ""PowerManagerService.WakeLocks"".",33
41,Skipping AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}} -- going to hide,2
42,Bad activity token: {token},1
43,java.lang.ClassCastException: android.os.BinderProxy cannot be cast to com.android.server.am.ActivityRecord$Token,1
44,"onTouchEvent::{arg1}, x={x}, y={y}",1
45,schedulePeek,1
46,getRingtonePlayer...,2
47,disable: < expand ICONS* alerts SYSTEM_INFO* back home recent clock navigationbar search quick_settings >,3
48,"updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}",6
49,"updateLightsLocked,turn off notificationLight",6
50,"overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}",11
51,"state.clipTopAmount:{clipTopAmount}, i:{i}",13
52,onExpandingStarted,2
53,onTrackingStarted,1
54,Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line},19
55,"overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}",2
56,"onTouchEvent::1, x={x}, y={y}",1
57,cancelPeek: {value},20
58,"flingToHeight: vel={vel}, expand={expand}, target={target}, collapseSpeedUpFactor={collapseSpeedUpFactor}, expandBecauseOfFalsing={expandBecauseOfFalsing}",2
59,onTrackingStopped: {value},1
60,onExpandingFinished,2
61,Sending non-protected broadcast {action} from system {system}: {pkg},2
62,logNotificationVisibilityChanges runInThread start,6
63,onNotificationVisibilityChanged called,6
64,logNotificationVisibilityChanges runInThread over,6
65,isSimPinSecure mSimDatas is null or empty,1
66,registerCallback not in UI.,3
67,android.util.AndroidRuntimeException: Must execute in UI,3
68,*** register callback for {callback},1
69,*** unregister callback for null,1
70,getDataEnabled: subId={subId} phoneId={phoneId},1
71,[PhoneIntfMgr] getDataEnabled: subId={subId} retVal={retVal},1
72,"onInterceptTouchEvent MotionEvent { action={action}, actionButton={actionButton}, id[0]={id[0]}, x[0]={x[0]}, y[0]={y[0]}, toolType[0]={toolType[0]}, buttonState={buttonState}, metaState={metaState}, flags={flags}, edgeFlags={edgeFlags}, pointerCount={pointerCount}, historySize={historySize}, eventTime={eventTime}, downTime={downTime}, deviceId={deviceId}, source={source} }, mBlockTouches={mBlockTouches}",4
73,playSoundEffect   effectType: {effectType},10
74,"animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}",8
75,START u0 {act={act} flg={flg} cmp={cmp} (has extras)} from uid {uid} on display {display},1
76,"ActivityRecord info: ActivityInfo{${activity}}, euid: ${euid}",1
77,onNotificationClick called,2
78,"cancelNotification,index:{index}",23
79,"cancelNotification,cancelNotificationLocked,callingUid = {callingUid},callingPid = {callingPid}",2
80,"cancelNotificationLocked called,tell the app,reason = {reason}",2
81,cancelNotificationLocked:{index}|{pkg}|{id}|{tag}|{uid},2
82,"cancelNotificationLocked,remove ={packageName}",1
83,applyOptionsLocked: Unknown animationType={animationType},2
84,"Taking screenshot from Surface with crop:[{crop}], width:[{width}], height:[{height}], minLayer:[{minLayer}], maxLayer:[{maxLayer}], inRotation:[{inRotation}], rot:[{rot}]",4
85,removeNotification:{index}|{pkg}|{id}|{tag}|{uid},2
86,"updateNotificationShade: total={total}, active={active}",13
87,The change in focus caused us to need to do a layout begin,6
88,The change in focus caused us to need to do a layout end,6
89,setLightsOn(true),181
90,removeNotificationChildren,12
91,"Skipping, withExcluded: {withExcluded}, tr.intent:{intent}",63
92,"getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}",14
93,getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity},8
94,"cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}",20
95,makeExpandedInvisible: mExpandedVisible={mExpandedVisible},4
96,closeQs,12
97,instantCollapse,9
98,disable: < {options} >,3
99,*** unregister callback for {callback},1
100,getTasks: caller {caller} does not hold REAL_GET_TASKS; limiting output,37
101,isMusicActive...,12
102,"Start dump, calling from : pid={pid}, uid={uid}",1
103,setWiredDeviceConnectionState  type: {type}  state: {state},2
104,"ActivityManagerService,attachApplication,callingPid = {callingPid}",4
105,isBluetoothA2dpOn...,1
106,isBluetoothScoOn...,1
107,getLastAudibleStreamVolume  treamType: {streamType},9
108,getDevicesForStream  streamType: {streamType},2
109,cleanUpApplicationRecord -- {value},6
110,"cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}",6
111,"cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}",6
112,stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={value},6
113,stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={mWifiDisplayScanRequestCount},6
114,getMode...,1
115,setSpeakerphoneOn  on: {on},1
116,setSpeakerphoneOn on:{on},1
117,"sending alarm Alarm{${alarm} type ${type} when ${when} PendingIntent{${pendingIntent}}},repeatInterval = ${repeatInterval},listenerTag =${listenerTag}",2
118,Received TIME_TICK alarm; rescheduling,3
119,scheduleTimeTickEvent triggerAtTime = {triggerAtTime},3
120,received broadcast android.intent.action.TIME_TICK,3
121,handleTimeUpdate,3
122,"sending alarm Alarm{ {alarmId} type {type} when {when} PendingIntent{ {pendingIntentId}: PendingIntentRecord{ {packageName} {intentType}}}},repeatInterval = {repeatInterval},listenerTag ={listenerTag}",1
123,Killing {pid}:{processName}/{userId} (adj {adj}): empty for {duration}s,1
124,"sending alarm Alarm{c1705d3 type 3 when 509202333 PendingIntent{1749923: PendingIntentRecord{9600e20 android broadcastIntent}}},repeatInterval = {repeatInterval},listenerTag ={listenerTag}",1
125,Unable to start service Intent { act={act} cmp={cmp} } U={U}: not found,1
126,unregisterAudioFocusListener...,1
127,abandonAudioFocus,1
128,"[HSM] stayAwake {value} uid: {uid}, pid: {pid}",1
129,Pid:{pid} MediaPlayer destructor,1
130,Process {processName} (pid {pid}) has died,1
131,Scheduling restart of crashed service {service} in {time}ms,1
132,"new Process app=ProcessRecord{${processRecord} ${processName}/${userId}}, name: ${processName}, euid: ${euid}",1
133,Start proc {pid}:{processName} for service {serviceName},1
134,enqueueNotificationInternal: pkg={pkg} id={id} notification={notification},2
135,enqueueNotificationInternal: n.getKey = {key}|{pkg}|{id}|{tag}|{uid},1
136,getRingerMode...,3
137,addNotification key={key}|{pkg}|{id}|{tag}|{uid},1
138,mHeadsUpExistenceChangedRunnable,4
139,Marking notification as seen {seen}|{package}|{id}|{tag}|{uid},1
140,onNotificationExpansionChanged called,2
141,START u0 {act={act} cat={cat} flg={flg} cmp={cmp} bnds={bnds}} from uid {uid} on display {display},2
142,"ActivityRecord info: ActivityInfo{f39182 com.example.android.notepad.NotePadActivity}, euid: {euid}",1
143,getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor},4
144,"ACTIVITY check resid: {resid}, size={size}",2
145,Destroying surface Surface(name={name}) called by {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line} {caller}:{line},1
146,Destroying surface Surface(name={name}) called by {caller},2
147,"ActivityRecord info: ActivityInfo{${activityInfo}}, euid: ${euid}",2
148,"cancelNotificationLocked,remove ={remove}",1
149,getAllCellInfo is blocked by permission manager . callingPackage = {callingPackage},3
150,getCellLocation is blocked by permission manager uid:{uid} pid:{pid},1
151,isWiredHeadsetOn...,1
152,"setDataSource({arg1}, {arg2}, {arg3})",1
153,getStreamVolume  treamType: {streamType},1
154,Destroying surface Surface(name=InputMethod) called by {caller}:2060 {method1}:913 {method2}:2201 {method3}:517 {method4}:291 {method5}:233 {method6},1
155,"updateIsPoweredLocked: wasPowered={wasPowered}, mIsPowered={mIsPowered}, oldPlugType={oldPlugType}, mPlugType={mPlugType}, mBatteryLevel={mBatteryLevel}",1
156,received broadcast android.intent.action.BATTERY_CHANGED,1
157,ACTION_BATTERY_CHANGED AMP: {amp}; Volt: {volt},1
158,updateChargingLocked: charging={charging},1
159,"onReceive, action:{action}",1
160,ACTION_BATTERY_CHANGED pluggedType: {pluggedType},1
161,ApStaDisabledState what={what},1
162,DefaultState what={what},1
163,battery changed pluggedType: {pluggedType},1
164,RefreshBatteryInfo isBatteryLow: {isBatteryLow},2
165,ChargingSpeed  Wattage: -1 ST: {startWattage} --> {endWattage},1
166,handleBatteryUpdate,1
167,enqueueNotificationInternal: n.getKey = {key}|{packageName}|{id}|{tag}|{uid},1
168,addNotification key={key}|{packageName}|{id}|{tag}|{uid},1
169,Marking notification as seen {seen}|{packageName}|{id}|{tag}|{uid},1
170,"sending alarm Alarm{${alarmId} type ${type} when ${when} PendingIntent{${pendingIntent}}},repeatInterval = ${repeatInterval},listenerTag =${listenerTag}",1
171,START u0 {flg={flg} cmp={cmp} (has extras)} from uid {uid} on display {display},1
172,startActivity called from non-Activity context; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent { flg={flg} cmp={cmp} (has extras) },1
173,getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI},2
